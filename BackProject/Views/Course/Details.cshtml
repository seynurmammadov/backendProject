@model CourseVM
@{
    ViewData["Title"] = "Eduhome - Course Details";

    List<string> autors = new List<string>();
}

<!-- Banner Area Start -->
@await Component.InvokeAsync("SiteTitle", "course details")

<!-- Banner Area End -->
<!-- Blog Start -->
<div class="courses-details-area blog-area pt-150 pb-140">
    <div class="container">
        <div class="row">
            <div class="col-md-8">
                <div class="courses-details">
                    <div class="courses-details-img">
                        <img src="~/site/img/course/@Model.Course.Image" width="770" height="410" alt="courses-details">
                    </div>
                    <div class="course-details-content">
                        <h2>@Model.Course.Name</h2>
                        <p>@Model.Course.ShortDescription</p>
                        @Html.Raw(Model.Course.Description)
                    </div>
                    @await Component.InvokeAsync("LeaveReply")

                </div>
            </div>
            <div class="col-md-4">
                <div class="blog-sidebar right">
                    <div class="single-blog-widget mb-50">
                        <h3>search</h3>
                        <div class="blog-search">
                            <form id="search" action="../../search">
                                <input type="search" placeholder="Search..." name="val" />
                                <button type="submit">
                                    <span><i class="fa fa-search"></i></span>
                                </button>
                            </form>
                        </div>
                    </div>
                    <div class="single-blog-widget mb-50">
                        <h3>categories</h3>
                        <ul>
                            @foreach (CourseCategory item in Model.Course.CourseCategories)
                            {
                                <li><a asp-controller="course" asp-action="index" asp-route-id="@item.CategoryId">@item.Category.Name (@item.Category.CourseCategories.Where(c=>c.CategoryId==item.CategoryId && c.Activeted && !c.IsDeleted).Count())</a></li>
                            }
                        </ul>
                    </div>
                    <div class="single-blog-widget mb-50">
                        <div class="single-blog-banner">
                            <a href="blog-details.html" id="blog"><img src="~/site/img/blog/blog-img.jpg" alt="blog"></a>
                            <h2>best<br> eductaion<br> theme</h2>
                        </div>
                    </div>
                    <div class="single-blog-widget mb-50">
                        <h3>latest post</h3>
                        @foreach (Course item in Model.LastestCourse)
                        {
                            <div class="single-post mb-30">
                                <div class="single-post-img">
                                    <a href="blog-details.html">
                                        <img src="~/site/img/post/post1.jpg" alt="post">
                                        <div class="blog-hover">
                                            <i class="fa fa-link"></i>
                                        </div>
                                    </a>
                                </div>
                                <div class="single-post-content">
                                    <h4><a href="blog-details.html">@item.Name</a></h4>
                                    <p>
                                        By
                                        @{
                                            foreach (CourseModerator moderator in item.CourseModerators)
                                            {
                                                autors.Add(moderator.Moderator.Name);
                                            }
                                            <span class="text-capitalize">@string.Join(", ", autors) </span>
                                            autors.Clear();
                                        }

                                        /  @item.Created_at.ToString("MMMM dd, yyyy")
                                    </p>

                                </div>

                            </div>
                        }
                    </div>
                    <div class="single-blog-widget">
                        <h3>tags</h3>
                        <div class="single-tag">
                            @foreach (Tag item in Model.Tags)
                            {
                                <a role="button" class="text-capitalize mb-10 mr-10">@item.Name</a>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Blog End -->
<!-- Subscribe Start -->
@await Component.InvokeAsync("Subscribe")
<!-- Subscribe End -->
